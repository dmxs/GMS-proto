// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/chat/chat.proto

package chat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Chat service

type ChatService interface {
	Post(ctx context.Context, in *PostReq, opts ...client.CallOption) (*PostResp, error)
	GetQueue(ctx context.Context, in *GetQueueReq, opts ...client.CallOption) (*GetQueueResp, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "nezha.chat.chat.srv.service"
	}
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) Post(ctx context.Context, in *PostReq, opts ...client.CallOption) (*PostResp, error) {
	req := c.c.NewRequest(c.name, "Chat.Post", in)
	out := new(PostResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) GetQueue(ctx context.Context, in *GetQueueReq, opts ...client.CallOption) (*GetQueueResp, error) {
	req := c.c.NewRequest(c.name, "Chat.GetQueue", in)
	out := new(GetQueueResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatHandler interface {
	Post(context.Context, *PostReq, *PostResp) error
	GetQueue(context.Context, *GetQueueReq, *GetQueueResp) error
}

func RegisterChatHandler(s server.Server, hdlr ChatHandler, opts ...server.HandlerOption) error {
	type chat interface {
		Post(ctx context.Context, in *PostReq, out *PostResp) error
		GetQueue(ctx context.Context, in *GetQueueReq, out *GetQueueResp) error
	}
	type Chat struct {
		chat
	}
	h := &chatHandler{hdlr}
	return s.Handle(s.NewHandler(&Chat{h}, opts...))
}

type chatHandler struct {
	ChatHandler
}

func (h *chatHandler) Post(ctx context.Context, in *PostReq, out *PostResp) error {
	return h.ChatHandler.Post(ctx, in, out)
}

func (h *chatHandler) GetQueue(ctx context.Context, in *GetQueueReq, out *GetQueueResp) error {
	return h.ChatHandler.GetQueue(ctx, in, out)
}
