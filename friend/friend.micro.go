// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/friend/friend.proto

package friend

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Friend service

type FriendService interface {
	Post(ctx context.Context, in *PostReq, opts ...client.CallOption) (*PostResp, error)
	DelByUserID(ctx context.Context, in *DelByUserIDReq, opts ...client.CallOption) (*DelByUserIDResp, error)
	CheckIsFriend(ctx context.Context, in *CheckIsFriendReq, opts ...client.CallOption) (*CheckIsFriendResp, error)
	GetList(ctx context.Context, in *GetListReq, opts ...client.CallOption) (*GetListResp, error)
}

type friendService struct {
	c    client.Client
	name string
}

func NewFriendService(name string, c client.Client) FriendService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "nezha.chat.friend.srv.service"
	}
	return &friendService{
		c:    c,
		name: name,
	}
}

func (c *friendService) Post(ctx context.Context, in *PostReq, opts ...client.CallOption) (*PostResp, error) {
	req := c.c.NewRequest(c.name, "Friend.Post", in)
	out := new(PostResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) DelByUserID(ctx context.Context, in *DelByUserIDReq, opts ...client.CallOption) (*DelByUserIDResp, error) {
	req := c.c.NewRequest(c.name, "Friend.DelByUserID", in)
	out := new(DelByUserIDResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) CheckIsFriend(ctx context.Context, in *CheckIsFriendReq, opts ...client.CallOption) (*CheckIsFriendResp, error) {
	req := c.c.NewRequest(c.name, "Friend.CheckIsFriend", in)
	out := new(CheckIsFriendResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) GetList(ctx context.Context, in *GetListReq, opts ...client.CallOption) (*GetListResp, error) {
	req := c.c.NewRequest(c.name, "Friend.GetList", in)
	out := new(GetListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Friend service

type FriendHandler interface {
	Post(context.Context, *PostReq, *PostResp) error
	DelByUserID(context.Context, *DelByUserIDReq, *DelByUserIDResp) error
	CheckIsFriend(context.Context, *CheckIsFriendReq, *CheckIsFriendResp) error
	GetList(context.Context, *GetListReq, *GetListResp) error
}

func RegisterFriendHandler(s server.Server, hdlr FriendHandler, opts ...server.HandlerOption) error {
	type friend interface {
		Post(ctx context.Context, in *PostReq, out *PostResp) error
		DelByUserID(ctx context.Context, in *DelByUserIDReq, out *DelByUserIDResp) error
		CheckIsFriend(ctx context.Context, in *CheckIsFriendReq, out *CheckIsFriendResp) error
		GetList(ctx context.Context, in *GetListReq, out *GetListResp) error
	}
	type Friend struct {
		friend
	}
	h := &friendHandler{hdlr}
	return s.Handle(s.NewHandler(&Friend{h}, opts...))
}

type friendHandler struct {
	FriendHandler
}

func (h *friendHandler) Post(ctx context.Context, in *PostReq, out *PostResp) error {
	return h.FriendHandler.Post(ctx, in, out)
}

func (h *friendHandler) DelByUserID(ctx context.Context, in *DelByUserIDReq, out *DelByUserIDResp) error {
	return h.FriendHandler.DelByUserID(ctx, in, out)
}

func (h *friendHandler) CheckIsFriend(ctx context.Context, in *CheckIsFriendReq, out *CheckIsFriendResp) error {
	return h.FriendHandler.CheckIsFriend(ctx, in, out)
}

func (h *friendHandler) GetList(ctx context.Context, in *GetListReq, out *GetListResp) error {
	return h.FriendHandler.GetList(ctx, in, out)
}
